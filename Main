import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.*;


public class Main {

	public static void main(String[] args) {
		// A scanner to read user input.
		Scanner readLine= new Scanner(System.in);
		System.out.println("please enter dates in the format: 28.2.2021 \"Day.Month.Year\"");
		System.out.print("Start date: ");
		// A string carries the start date.
		String startDate  = readLine.nextLine();
		System.out.println();
		System.out.print("End date: ");
		// A string carries the end date.
		String endDate  = readLine.nextLine();
		readLine.close();
		
		// Convert string to day, month & year.
		int startDay = 0, startMonth = 0, startYear = 0,
				endDay = 0, endMonth = 0, endYear = 0, numOfWeeks = 0, currentWeek = 1;
		String[] splitted = startDate.split("\\.");
		startDay = Integer.parseInt(splitted[0]);
		startMonth = Integer.parseInt(splitted[1]);
		startYear = Integer.parseInt(splitted[2]);
		splitted = endDate.split("\\.");
		endDay = Integer.parseInt(splitted[0]);
		endMonth = Integer.parseInt(splitted[1]);
		endYear = Integer.parseInt(splitted[2]);
		// Calculate number of weeks.
//		numOfWeeks = calculateNumberOfWeeks(months, startDay, startMonth, startYear, endDay, endMonth, endYear);
		numOfWeeks = calculateNumberOfWeeks(startDay, startMonth, startYear, endDay, endMonth, endYear);
		if (numOfWeeks < 8) {
			System.out.println("Error! Number of weeks should be more than 8 weeks!");
			return;
		}
		// print first test week line.
		System.out.println(weekDetails(currentWeek, startDay, startMonth, startYear, "Test"));
		// Increment current week.
		currentWeek++;
		// Initialize current date with the start date.
		LocalDate currentDate = addDays(startDay, startMonth, startYear, 7);
		// print second test week line.
		System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Test"));
		// Increment current week. 
		currentWeek++;
		// Increment current date by 7 days to 1st day of the new week.
		currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
		if ((numOfWeeks - 8) % 4 == 0) {
			numOfWeeks -= 4;
			while (numOfWeeks > 0) {
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Recovery"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 1"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 2"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Key"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Decrement number of weeks
				numOfWeeks -= 4;
			}
		} else if ((numOfWeeks - 8) % 4 == 1) {
			// Print filler week details.
			System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Filler"));
			// Increment current week. 
			currentWeek++;
			// Increment current date by 7 days to 1st day of the new week.
			currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
			// Decrement number of weeks
			numOfWeeks -= 5;
			while (numOfWeeks > 0) {
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Recovery"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 1"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 2"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Key"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Decrement number of weeks
				numOfWeeks -= 4;
			}
		} else if ((numOfWeeks - 8) % 4 == 2) {
			// Print extra key week details.
			System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 2"));
			// Increment current week. 
			currentWeek++;
			// Increment current date by 7 days to 1st day of the new week.
			currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
			// Print extra key week details.
			System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Key"));
			// Increment current week. 
			currentWeek++;
			// Increment current date by 7 days to 1st day of the new week.
			currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
			// Decrement number of weeks
			numOfWeeks -= 6;
			while (numOfWeeks > 0) {
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Recovery"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 1"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 2"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Key"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Decrement number of weeks
				numOfWeeks -= 4;
			}
		} else {
			// Print extra key week details.
			System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 1"));
			// Increment current week. 
			currentWeek++;
			// Increment current date by 7 days to 1st day of the new week.
			currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
			// Print extra key week details.
			System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 2"));
			// Increment current week. 
			currentWeek++;
			// Increment current date by 7 days to 1st day of the new week.
			currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
			// Print extra key week details.
			System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Key"));
			// Increment current week. 
			currentWeek++;
			// Increment current date by 7 days to 1st day of the new week.
			currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
			// Decrement number of weeks
			numOfWeeks -= 7;
			while (numOfWeeks > 0) {
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Recovery"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 1"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Build 2"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Print week details.
				System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Key"));
				// Increment current week. 
				currentWeek++;
				// Increment current date by 7 days to 1st day of the new week.
				currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
				// Decrement number of weeks
				numOfWeeks -= 4;
			}
		}
		// print tapper week line.
		System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Taper"));
		// Increment current week.
		currentWeek++;
		// Increment current date by 7 days to 1st day of the new week.
		currentDate = addDays(currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), 7);
		// print race week line.
		System.out.println(weekDetails(currentWeek, currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear(), "Race"));
	}
	
	// A function to convert month order to its string.
	private static String monthToString(int month) {
		switch (month) {
		case 1:
			return " January";
		case 2:
			return " February";
		case 3:
			return " March";
		case 4:
			return " April";
		case 5:
			return " May";
		case 6:
			return " June";
		case 7:
			return " July";
		case 8:
			return " August";
		case 9:
			return " September";
		case 10:
			return " October";
		case 11:
			return " November";
		case 12:
			return " December";
		default:
			return "";
		}
	}

	// A function calculates number of weeks.
//	private static int calculateNumberOfWeeks(HashMap<Integer, Integer> months, int startDay, int startMonth, int startYear,
	private static int calculateNumberOfWeeks(int startDay, int startMonth, int startYear,
			int endDay, int endMonth, int endYear) {
		LocalDate startDate = LocalDate.of(startYear, startMonth, startDay);
	    LocalDate endDate = LocalDate.of(endYear, endMonth, endDay);
	    int weeksInYear = (int) ChronoUnit.WEEKS.between(startDate, endDate);
		return weeksInYear+1;
	}

	// A function build details of the week.
	private static String weekDetails(int weekNumber, int startDay, int startMonth, int startYear, String weekActivety) {
		StringBuilder str = new StringBuilder();
		str.append("Week #");
		str.append(weekNumber);
		str.append(" - ");
		str.append(weekActivety);
		str.append(" - from ");
		str.append(startDay);
		str.append(monthToString(startMonth));
		str.append(" to ");
		LocalDate endDate = addDays(startDay, startMonth, startYear, 6);
		str.append(endDate.getDayOfMonth());
		str.append(monthToString(endDate.getMonthValue()));
		return str.toString();
	}
	
	// A function returns date after certain number of days from a start date.
	private static LocalDate addDays(int startDay, int startMonth, int startYear, int addedDays) {
		LocalDate startDate = LocalDate.of(startYear, startMonth, startDay);
		LocalDate endDate = startDate.plusDays(addedDays);
		return endDate;
	}

}

